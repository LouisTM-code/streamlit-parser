# ui/web_ui.py
import streamlit as st
import time
from typing import Optional, Tuple
from Parse import WebParser
import pandas as pd

class StreamlitUI:
    def __init__(self, parser: WebParser):
        self.parser = parser
        self._setup_page_config()
        self.progress_bar = None
        self.status_text = None

    def _setup_page_config(self):
        st.set_page_config(
            page_title="Web Parser",
            layout="centered",
            page_icon="üîç",
            initial_sidebar_state="expanded"
        )

    def render_sidebar(self) -> Optional[dict]:
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        with st.sidebar:
            st.title("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–æ–º")
            url = st.text_input("–°—Ç–∞—Ä—Ç–æ–≤—ã–π URL", "https://example.com")
            output_file = st.text_input("–ò–º—è —Ñ–∞–π–ª–∞", "products.xlsx")
            
            if st.button("üöÄ –ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥", use_container_width=True):
                return {"url": url, "output": output_file}
            
            st.markdown("---")
            self.stats_placeholder = st.empty()
        return None

    def _init_progress(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        self.progress_bar = st.progress(0)
        self.status_text = st.empty()
        self.stats_placeholder = st.empty()

    def _update_progress(self, value: float, status: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        self.progress_bar.progress(value)
        self.status_text.markdown(f"**–°—Ç–∞—Ç—É—Å:** {status}")
        
    def _show_stats(self, total: int, processed: int):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.stats_placeholder.markdown(f"""
        ### üìä –ü—Ä–æ–≥—Ä–µ—Å—Å
        - –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: **{total}**
        - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: **{processed}**
        - –û—Å—Ç–∞–ª–æ—Å—å: **{total - processed}**
        """)

    def render_results(self, data: pd.DataFrame, filename: str):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        st.success("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
        with st.expander("üìÅ –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö", expanded=True):
            st.dataframe(data, use_container_width=True, height=400)
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π Excel —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
        from io import BytesIO
        output = BytesIO()
        with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
            data.to_excel(writer, index=False, sheet_name='Products')
            writer.close()
        
        st.download_button(
            label="üíæ –°–∫–∞—á–∞—Ç—å Excel",
            data=output.getvalue(),
            file_name=filename,
            mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
            use_container_width=True
        )

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        st.title("üîç Web Parser")
        
        params = self.render_sidebar()
        if params:
            self._init_progress()
            try:
                result = self._run_parsing(params)
                if result is not None:
                    self.render_results(*result)
            except Exception as e:
                st.error(f"‚õî –û—à–∏–±–∫–∞: {str(e)}")
            finally:
                time.sleep(0.5)
                self.progress_bar.empty()
                self.status_text.empty()

    def _run_parsing(self, params: dict) -> Optional[Tuple[pd.DataFrame, str]]:
        """–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        # –≠—Ç–∞–ø 1: –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        self._update_progress(5, "–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
        start_page = self.parser.get_page(params['url'])
        if not start_page:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É")

        # –≠—Ç–∞–ø 2: –°–±–æ—Ä —Å—Å—ã–ª–æ–∫
        self._update_progress(15, "–ü–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ç–æ–≤–∞—Ä—ã...")
        links = self.parser.parse_links(start_page)
        if not links:
            raise Exception("–°—Å—ã–ª–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # –≠—Ç–∞–ø 3: –ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–æ–≤
        total = len(links)
        products = []
        for idx, link in enumerate(links, 1):
            try:
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                progress = 15 + int(70 * (idx / total))
                status = f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–∞ {idx}/{total}"
                self._update_progress(progress, status)
                self._show_stats(total, idx)
                
                # –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                with st.spinner(f"–û–±—Ä–∞–±–æ—Ç–∫–∞: {link.split('/')[-1]}"):
                    product_page = self.parser.get_page(link)
                    if product_page:
                        products.append(self.parser.parse_product(product_page))
                        time.sleep(0.1)  # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏

            except Exception as e:
                st.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω —Ç–æ–≤–∞—Ä {idx}: {str(e)}")

        # –≠—Ç–∞–ø 4: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self._update_progress(95, "–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞...")
        df = pd.DataFrame(products)
        if df.empty:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")
        
        return df, params['output']
