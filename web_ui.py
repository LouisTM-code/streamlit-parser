# ui/web_ui.py
import streamlit as st
import time
from io import BytesIO
from typing import Any, Dict, List, Optional, Tuple

import pandas as pd

from Parse import WebParser
from product_list_parser import ProductListParser


class StreamlitUI:
    def __init__(self, parser: WebParser):
        self.parser = parser
        self._setup_page_config()
        self.progress_bar = None
        self.status_text = None
        self.stats_placeholder = None

    # ------------------------------------------------------------------ #
    #                        BASIC PAGE CONFIG                           #
    # ------------------------------------------------------------------ #
    @staticmethod
    def _setup_page_config():
        st.set_page_config(
            page_title="Web Parser",
            layout="centered",
            page_icon="üîç",
            initial_sidebar_state="expanded",
        )

    # ------------------------------------------------------------------ #
    #                        SIDEBAR / TABS                              #
    # ------------------------------------------------------------------ #
    def render_sidebar(self) -> Optional[dict]:
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ —Å –¥–≤—É–º—è –≤–∫–ª–∞–¥–∫–∞–º–∏:
        1. –°—Ç–∞—Ä—Ç–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä  (—Å—Ç–∞—Ä—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª)
        2. ProductListParser (–º–∞—Å—Å–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫)
        """
        with st.sidebar:
            st.title("‚öôÔ∏è¬†–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–æ–º")
            tab_start, tab_list = st.tabs(["–ü–∞—Ä—Å–∏–Ω–≥ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫", "–ü–∞—Ä—Å–∏–Ω–≥ –ö–∞—Ç–∞–ª–æ–≥–∞"])

            params: Optional[dict] = None

            # ---------- –í–∫–ª–∞–¥–∫–∞ 1 ‚Äì –°—Ç–∞—Ä—Ç–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä ------------------- #
            with tab_start:
                url = st.text_input(
                    "–°—Ç–∞—Ä—Ç–æ–≤—ã–π URL", "https://example.com", key="start_url"
                )
                output_file = st.text_input(
                    "–ò–º—è —Ñ–∞–π–ª–∞", "products.xlsx", key="start_output"
                )
                if st.button(
                    "üöÄ¬†–ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥", key="start_button", width='stretch'
                ):
                    params = {
                        "mode": "start",
                        "url": url,
                        "output": output_file,
                    }

            # ---------- –í–∫–ª–∞–¥–∫–∞ 2 ‚Äì ProductListParser ------------------ #
            with tab_list:
                links_text = st.text_area(
                    "–°—Å—ã–ª–∫–∏ (–ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫–µ)",
                    height=200,
                    placeholder="https://example.com/product/123",
                    key="links_input",
                )
                output_file_links = st.text_input(
                    "–ò–º—è —Ñ–∞–π–ª–∞",
                    "product_list.xlsx",
                    key="links_output",
                )
                if st.button(
                    "üöÄ¬†–ó–∞–ø—É—Å—Ç–∏—Ç—å",
                    key="list_button",
                    width='stretch',
                ):
                    raw_links = [ln for ln in links_text.splitlines() if ln.strip()]
                    params = {
                        "mode": "productlist",
                        "links": raw_links,
                        "output": output_file_links,
                    }

            st.markdown("---")
            self.stats_placeholder = st.empty()

        return params

    # ------------------------------------------------------------------ #
    #                       COMMON PROGRESS HELPERS                      #
    # ------------------------------------------------------------------ #
    def _init_progress(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        self.progress_bar = st.progress(0)
        self.status_text = st.empty()
        self.stats_placeholder = st.empty()

    def _update_progress(self, value: float, status: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        self.progress_bar.progress(int(value))
        self.status_text.markdown(f"**–°—Ç–∞—Ç—É—Å:** {status}")

    def _show_stats(self, total: int, processed: int):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.stats_placeholder.markdown(
            f"""
        ### üìä¬†–ü—Ä–æ–≥—Ä–µ—Å—Å
        - –í—Å–µ–≥–æ: **{total}**
        - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: **{processed}**
        - –û—Å—Ç–∞–ª–æ—Å—å: **{total - processed}**
        """
        )

    # ------------------------------------------------------------------ #
    #                   RENDER RESULTS :  START PARSER                   #
    # ------------------------------------------------------------------ #
    def render_results(self, data: pd.DataFrame, filename: str):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞ (—Å—Ç–∞—Ä—ã–π —Ä–µ–∂–∏–º)"""
        st.success("‚úÖ¬†–ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")

        with st.expander("üìÅ¬†–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö", expanded=True):
            st.dataframe(data, width='stretch', height=400)

        output = BytesIO()
        with pd.ExcelWriter(output, engine="xlsxwriter") as writer:
            data.to_excel(writer, index=False, sheet_name="Products")

        st.download_button(
            label="üíæ¬†–°–∫–∞—á–∞—Ç—å Excel",
            data=output.getvalue(),
            file_name=filename,
            mime=(
                "application/"
                "vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            ),
            width='stretch',
        )

    # ------------------------------------------------------------------ #
    #               RENDER RESULTS :  PRODUCT LIST PARSER                #
    # ------------------------------------------------------------------ #
    def render_product_list_results(
        self,
        stats: Dict[str, Any],
        excel_content: bytes,
        filename: str,
    ):
        """–í—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É + –∫–Ω–æ–ø–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è Excel —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ª–∏—Å—Ç–∞–º–∏"""
        st.success("‚úÖ¬†–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        st.subheader("üìä¬†–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        st.markdown(
            f"""
        - –í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫: **{stats['total']}**
        - –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: **{stats['success']}**
        - –û—à–∏–±–æ–∫: **{stats['failed']}**
        - –¢–æ–≤–∞—Ä–æ–≤ —Å–æ–±—Ä–∞–Ω–æ: **{stats['total_products']}**
        """
        )

        if stats["failed"]:
            with st.expander("‚ö†Ô∏è¬†–°—Å—ã–ª–∫–∏ —Å –æ—à–∏–±–∫–∞–º–∏"):
                st.write(stats["failed_links"])

        # –∫–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º–Ω–æ–≥–æ-–ª–∏—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
        st.download_button(
            label="üíæ¬†–°–∫–∞—á–∞—Ç—å Excel",
            data=excel_content,
            file_name=filename,
            mime=(
                "application/"
                "vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            ),
            width='stretch',
        )

    # ------------------------------------------------------------------ #
    #                             MAIN LOOP                              #
    # ------------------------------------------------------------------ #
    def run(self):
        st.title("üîç¬†Web Parser")

        params = self.render_sidebar()
        if not params:
            return

        self._init_progress()
        try:
            if params["mode"] == "start":
                result = self._run_parsing(params)
                if result:
                    self.render_results(*result)
            else:  # mode == productlist
                stats, excel_data, out_file = self._run_product_list(params)
                self.render_product_list_results(stats, excel_data, out_file)
        except Exception as exc:
            st.error(f"‚õî¬†–û—à–∏–±–∫–∞: {exc}")
        finally:
            time.sleep(0.5)
            self.progress_bar.empty()
            self.status_text.empty()

    # ------------------------------------------------------------------ #
    #                      ORIGINAL START‚ÄëPARSER FLOW                    #
    # ------------------------------------------------------------------ #
    def _run_parsing(self, params: dict) -> Optional[Tuple[pd.DataFrame, str]]:
        """–ü—Ä–æ—Ü–µ—Å—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ URL (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º)"""
        links = self.parser.iter_category_product_links(params["url"])
        if not links:
            raise Exception("–°—Å—ã–ª–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        self._update_progress(15, "–ü–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ç–æ–≤–∞—Ä—ã‚Ä¶")
        total = len(links)
        products: List[Dict[str, Any]] = []

        for idx, link in enumerate(links, 1):
            try:
                progress = 15 + int(70 * (idx / total))
                self._update_progress(progress, f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–∞ {idx}/{total}")
                self._show_stats(total, idx)

                with st.spinner(f"–û–±—Ä–∞–±–æ—Ç–∫–∞: {link.split('/')[-1]}"):
                    product_page = self.parser.get_page(link)
                    if product_page:
                        products.append(self.parser.parse_product(product_page))
                    time.sleep(0.1)  # –∏–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
            except Exception as ex:
                st.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω —Ç–æ–≤–∞—Ä {idx}: {ex}")

        self._update_progress(95, "–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞‚Ä¶")
        df = pd.DataFrame(products)
        if df.empty:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")

        return df, params["output"]

    # ------------------------------------------------------------------ #
    #                 NEW FLOW  ‚Äì  PRODUCT LIST PARSER                   #
    # ------------------------------------------------------------------ #
    def _run_product_list(
        self, params: dict
    ) -> Tuple[Dict[str, Any], bytes, str]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ URL-–∞–¥—Ä–µ—Å–æ–≤ (–∞–≥—Ä–µ–≥–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü –≤ –æ–¥–Ω–æ–º –ª–∏—Å—Ç–µ –Ω–∞ URL)"""
        links: List[str] = params["links"]
        total = len(links)
        if total == 0:
            raise Exception("–°–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –ø—É—Å—Ç")

        self._update_progress(5, "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ProductListParser‚Ä¶")
        pl_parser = ProductListParser(
            links=links, output_file=params["output"], base_parser=self.parser
        )

        # –≤–µ—Å—å –æ–±—Ö–æ–¥ /page-N/ –∏ —Å–±–æ—Ä —Å—Ç—Ä–æ–∫ ‚Äî –≤–Ω—É—Ç—Ä–∏ ProductListParser.run()
        self._update_progress(20, "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü –∏ —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö‚Ä¶")
        _, stats = pl_parser.run()

        self._update_progress(95, "–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞‚Ä¶")
        excel_bytes = pl_parser.save_results()
        return stats, excel_bytes, params["output"]

